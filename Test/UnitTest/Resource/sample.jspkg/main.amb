top: VBox {
    index: 0
    //adbook: AddressBook {
    //}
    message: HBox {
	    logo: ImageView {
			name: "logo"
	    }
	    text_a: TextField {
			minWidth: 20
			text: Listner(index: top.index) %{
				let label = "?" ;
				let rec   = top.adbook.record ;
				if(rec != null){
					let val = rec.value("family_name") ;
					if(isString(val)){
						label = val ;
					}
				}
				return "index: " + label ;
			%}
	    }
		graphics: Graphics2D {
			xOrigin:  -1.0
			yOrigin:  -1.0
			xSize:    2.0
			ySize:    2.0
			draw: Event(context, count) %{
				//console.log("[Grahics2D] " + count) ;
				let lframe = context.logicalFrame ;
				let offset = Math.PI * ((count % 10) / 10.0) ;
				context.moveTo(lframe.x, Math.sin(lframe.x + offset)) ;
				for(let x=lframe.x ; x<=lframe.x + lframe.width ; x+=0.1) {
					let y = Math.sin(x + offset) ;
					context.lineTo(x, y) ;
				}
			%}
			init: Init %{
				console.log("[Graphics2D] Init") ;
				self.start(1.0, 10.0) ;
			%}
		}

		bitmap: Bitmap {
			draw: Event(context, count) %{
				let pos  = count % 10 ;
				context.clean() ;
				context.set(pos, pos, Color.blue) ;
			%}
			init: Init %{
				console.log("[Bitmap] Init") ;
				self.start(1.0, 10.0) ;
			%}
		}

    }
    boxes: HBox {
		checkBox0: CheckBox {
			title:	"option-0"
			pressed: Event(status) %{
				console.log("option-0: " + status) ;
			%}
		}
		checkBox1: CheckBox {
			title:	"option-1"
			status: false
			pressed: Event(status) %{
				console.log("option-1: " + status) ;
			%}
		}
		button0: Button {
			title:	Listner(state: top.message.graphics.state) %{
				let result = "Unknown" ;
				switch(state) {
					case AnimationState.idle:
						result = "Start" ;
					break ;
					case AnimationState.run:
						result = "Stop" ;
					break ;
					case AnimationState.pause:
						result = "Stop" ;
					break ;
				}
				return result ;
			%}

			pressed: Event() %{
				let grp = top.message.graphics ;
				let bmp = top.message.bitmap ;
				switch(grp.state){
				  case AnimationState.idle:
					top.message.graphics.start(1.0, 10.0) ;
					top.message.bitmap.start(1.0, 10.0) ;
				  break ;
				  case AnimationState.run:
					top.message.graphics.stop() ;
					top.message.bitmap.stop() ;
				  break ;
				  case AnimationState.pause:
				  break ;
				}

			%}
		}
		menu0: PopupMenu {
			items: ["a", "b", "c"]
		}
    }
    dataTable: TableView {
	hasHeader: true
	fieldNames: [
		{field:"c0", title:"col[0]"},
		{field:"c1", title:"col[1]"},
		{field:"c2", title:"col[2]"}
	]
	init: Init %{
		console.log("[Table View] Init") ;

		/* Set data */
		let table   = TableStorage("storage", "root") ;

		let rec0  = Record() ;
		rec0.setValue(30, "c0") ;
		rec0.setValue(31, "c1") ;
		rec0.setValue(32, "c2") ;
		table.append(rec0) ;

		let rec1  = Record() ;
		rec1.setValue(40, "c0") ;
		rec1.setValue(41, "c1") ;
		rec1.setValue(42, "c2") ;
		table.append(rec1) ;

		self.dataTable = table ;
		self.reload() ;
	%}
	filter: Event(record) %{
		console.log("recordMapping") ;
		return true ;
	%}
    }
    labelBox: LabeledBox {
	title: "Label Box"
	box: HBox {
		firstName: Label {
			text: "first-name"
		}
		givenName: Label {
			text: "given-name"
		}
        }
    }
    collection: CollectionView {
        init: Init %{
		console.log("[CollectionView] Init") ;

                let col0 = Collection() ;
                let paths = [
                        Symbols.chevronBackward,
                        Symbols.chevronForward,
			Symbols.characterA,
			Symbols.handRaised,
			Symbols.paintbrush,
			Symbols.pencil

                ] ;
                col0.add("Header", "Footer", paths) ;
                self.store(col0) ;
        %}
    }
    button_a: Button {
        title:  "Go to Second"
        pressed: Event() %{
			console.log("launch button view .. start") ;
			enterView("button_view", null) ;
        %}
    }
	init: Init %{
		console.log("[Main] Init") ;
		top.boxes.menu0.items = ["Hello", "Good morning", "Good evening"]
	%}
}

